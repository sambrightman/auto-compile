{"name":"auto-compile.el","google":"","tagline":"Automatically compile Emacs Lisp libraries","body":"This package provides two minor modes `auto-compile-global-mode` and `auto-compile-on-load-mode` which keep byte code files (`.elc`) up-to-date with their Emacs Lisp source files (`.el`).\r\n\r\n### Status\r\n\r\nThis is a pre-release.  Version `1.1.0` (not `1.0.0`) will be the first stable release.  This is inspired by how Emacs versions are numbered. Do not use versions before `1.0.1`.\r\n\r\n### Why?\r\n\r\nAutomatically compiling Emacs Lisp source files after each save and/or before loading is useful for at least the following reasons:\r\n\r\nEmacs prefers the byte code file over the source file even if the former is outdated.  Without a mode which automatically recompiles the source files you will at least occasionally forget to do so manually and end up with an old version of your code being loaded.\r\n\r\nThere are many otherwise fine libraries to be found on the Internet which when compiled will confront the user with a wall of compile warnings and an occasional error.  If authors are informed about these (often trivial) problems after each save they will likely fix them quite quickly.  That or they have a high noise tolerance.\r\n\r\nIt's often easier and less annoying to fix errors and warnings as they are introduced than to do a \"let's compile today's work and see how it goes\".\r\n\r\n### auto-compile-global-mode\r\n\r\n`auto-compile-global-mode` automatically compiles Emacs Lisp code when the visiting buffers are saved to their source files, provided that the respective byte code files already exists.  If the byte code file does not already exist nothing is done.\r\n\r\nTo start or stop compiling a source file or multiple files at once use the command `toggle-auto-compile` which toggles automatic compilation by either compiling the selected source file(s) or by removing the respective byte code file(s).  The appropriate action is determined by the existence respectively absence of the byte code file.\r\n\r\nAuto-Compile mode is designed to stay out of your way as much as it can while still motivating you to get things fixed.  But Auto-Compile mode can also be configured to be more insistent, which might be annoying initially but less so once existing problems have been fixed.\r\n\r\nOccasionally you might be tempted to turn of Auto-Compile mode locally because you are doing some work which causes lots of expected warnings until you are actually done.  Don't do so: because Emacs prefers the byte code file you would also have to remove that, in which case you don't have to turn of this mode anymore.  In other words use the command `toggle-auto-compile` instead.\r\n\r\n### auto-compile-on-load-mode\r\n\r\nEven when using `auto-compile-mode` it can sometimes happen that the source file is newer than the byte compile destination.  This can for example happen when performing version control operations. To ensure that byte code files are always up-to-date when being loaded using `require` and `load` enable `auto-compile-on-load-mode` which advises this functions to recompile the source files when needed.  Enable these mode before any potentially byte compiled files are loaded by beginning your init file with:\r\n\r\n    ;; -*- no-byte-compile: t -*-\r\n    (add-to-list 'load-path \"/path/to/auto-compile\")\r\n    (require 'auto-compile)\r\n    (auto-compile-on-load-mode 1)\r\n    (auto-compile-global-mode 1)\r\n\r\n### Further reading\r\n\r\nAs always also consult the [library commentary](https://github.com/tarsius/auto-compile/blob/master/auto-compile.el).  Also see `M-x customize-group auto-compile`.","note":"Don't delete this file! It's used internally to help with page regeneration."}